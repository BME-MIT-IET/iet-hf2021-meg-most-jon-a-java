//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Karakter.java
//  @ Date : 2020. 03. 19.
//  @ Author : 
//
//


import java.io.Serializable;
import java.util.ArrayList;

/**
 * A Karakter osztaly felelossegeit valositja meg, absztrakt osztaly.
 */
public abstract class Karakter implements Serializable, JatekVezerlo {

	/**
	 * Tabla amin all.
	 */
	protected Tabla tabla;
	/**
	 * Karakter targyai, amiket mar felvett es tud hasznalni.
	 */
	private ArrayList<Dolog> dolgok = new ArrayList<>();
	/**
	 * Karakter hp-ja.
	 */
	private int hp = getMaxHp();
	/**
	 * Karakter maradek munka lehetosege.
	 */
	private int munka = 4;
	/**
	 * Az eppen aktiv targy indexe.
	 */
	private int aktivdolog = 0;

	/**
	 * Visszaadja a tablat, melyen a karakter all.
	 * @return Tabla A tabla, melyen a karakter all.
	 */
	public Tabla getTabla() {
		return tabla;
	}

	/**
	 * Beallitja a tablat, melyen a karakter all.
	 * @param tabla A tabla, melyen a karakter all.
	 */
	public void setTabla(Tabla tabla) {
		this.tabla = tabla;
	}

	/**
	 * Visszaadja a karakter dolgait.
	 * @return ArrayList<Dolog></Dolog> A karakter dolgai.
	 */
	public ArrayList<Dolog> getDolgok() {
		return dolgok;
	}

	/**
	 * Beallitja a karakter dolgait.
	 * @param dolgok A karakter dolgai.
	 */
	public void setDolgok(ArrayList<Dolog> dolgok) {
		this.dolgok = dolgok;
	}

	/**
	 * Visszaadja a karakter munkajat.
	 * @return int A karakter munkaja.
	 */
	public int getMunka() {
		return munka;
	}

	/**
	 * Beallitja a karakter munkajat.
	 * @param munka A karakter munkaja.
	 */
	public void setMunka(int munka) {
		this.munka = munka;
	}

	/**
	 * Visszaadja a karakternel levo
	 * eppen aktiv dolog indexet.
	 * @return int Az aktiv dolog indexe.
	 */
	public int getAktivdolog() {
		return aktivdolog;
	}

	/**
	 * Beallitja a karakternel levo
	 * eppen aktiv dolog indexet.
	 * @param aktivdolog Az aktivdolog indexe.
	 */
	public void setAktivdolog(int aktivdolog) {
		this.aktivdolog = aktivdolog;
	}

	/**
	 * Visszaadja a karakter hp-jat.
	 * @return int A karakter hp-ja.
	 */
	public int getHp() {
		return hp;
	}

	/**
	 * Beallitja a karakter hp-jat.
	 * @param hp A karakter hp-ja.
	 */
	public void setHp(int hp) {
		this.hp = hp;
	}

	/**
	 * Karakter specialis kepessegenek hasznalata.
	 * Absztrakt fuggveny.
	 * @param irany Melyik iranyba hasznalja a
	 * specialis kepesseget.
	 */
	public abstract void kepesseg(int irany);

	/**
	 * Karakter max hp-jat adja vissza.
	 * @return int A karakter max hp-ja.
	 */
	protected int getMaxHp(){
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		return 4;
	}

	/**
	 * Karakter mozgasat intezi.
	 * @param irany Melyik iranyba mozogjon a karakter.
	 */
	public void lep(int irany) {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		Tabla tabla_ahovalep = tabla.szomszedLeker(true, irany);
		if(tabla_ahovalep == null){
			kiir("lepes_sikertelen", "output.txt");
			return;
		}
		tabla.eltavolit(this);
		tabla_ahovalep.elfogad(this);
		tabla = tabla_ahovalep;
		munka--;
		if( tabla.getEpitmeny() == null || (tabla.getEpitmeny() != null && tabla.getEpitmeny().getClass() != Iglu.class)) {
			for (Npc n : tabla.getNpck()) {
				if (n.getClass() == new Jegesmedve().getClass())
					this.hpNullazas();
			}
		}
	}

	/**
	 * Karakter ezzel a metodussal as.
	 */
	public void as() {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		tabla.horetegValtoztat(-1);
		munka--;
		kiir("karakter_as", "output.txt");

	}

	/**
	 * Karakter felvesz egy targyat.
	 */
	public void felvesz() {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		if(tabla.getHoreteg() == 0) {
			Dolog d = tabla.getDolog();
			if (d != null) {
				for (Dolog sajat_dolog : dolgok) {
					if (sajat_dolog.hasonlit(d)) {
						kiir("karakter_dologfelvetel_sikertelen", "output.txt");
						return;
					}
				}
				munka--;
				tabla.eltavolit();
				dolgok.add(d);
				kiir("karakter_dologfelvetel_sikeres", "output.txt");
			}
			else kiir("karakter_dologfelvetel_sikertelen", "output.txt");
		}
	}

	/**
	 * Karakter hasznalja az eppen aktiv targyat.
	 * @param irany Melyik iranyba hasznalja az adott targyat.
	 * @return boolean A dolog hasznal fuggvenyenek visszateresi
	 * ertekevel ter vissza.
	 */
	public boolean dolgotHasznal(int irany) {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		/* Ha nincs dolga szimplan as, vagy ha asni akar ( aktualis dolog indexe nagyobb mint amilyen indexei lehetnek. */
		if(dolgok.size() == aktivdolog){
			as();
			return false;
		}
		if(!dolgok.get(aktivdolog).hasonlit(new Lapat()) && !dolgok.get(aktivdolog).hasonlit(new TorekenyLapat()))
			munka--;
		// ha lapatokkal asik 2szer vonna le asas miatt, igy egyet vissza kap:
		else{
			munka++;
		}
		return dolgok.get(aktivdolog).hasznal(this, irany);
	}

	/**
	 * Karakter hp-ja nullazodik.
	 */
	public void hpNullazas() {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		setHp(0);
	}

	/**
	 * Karakter hp-jat valtoztatja.
	 * @param i Az ertek, mellyel a karakter
	 * hp-jat valtoztatjuk.
	 * @return  boolean Attol fuggoen, hogy a
	 * valtoztatas soran meghalt-e a karakter
	 * terunk vissza true vagy false ertekkel.
	 */
	public boolean hpValtoztat(int i) {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		int max = getMaxHp();
		hp += i;
		if (hp > max) {
			hp = max;
			/* Mert nem halt meg. */
			return false;
		}
		if (hp > 0){
			/* Mert nem halt meg. */
			return false;
		}
		/* Mert meghalt. */
		return true;
	}

	/**
	 * Karakter valtoztatja az aktualis targyat a kovetkezore.
	 */
	public void targyValtas() {
		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> függvenye fut! ");

		aktivdolog++;
		/* Tulindexeles elkerulese vegett. Eggyel tulindexelhet, akkor hasznalja a kezet asasra. */
		if (aktivdolog > dolgok.size()){
			aktivdolog = 0;
		}
		kiir("karakter_dologvalt", "output.txt");
	}
}
