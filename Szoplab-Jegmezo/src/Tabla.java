import java.io.Serializable;
import java.util.ArrayList;
import java.util.Random;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Tabla.java
//  @ Date : 2020. 03. 19.
//  @ Author : 
//
//
/* A Tabla osztaly felelossegeit valositja meg. */
public class Tabla implements Serializable, JatekVezerlo {
	/** Valtozok: */

	/**
	 * Jegmezon levo szomszedoknak a listaja.
	 */
	private ArrayList<Tabla> szomszedok = new ArrayList<>();

	/**
	 * Jegmezon levo karakterek.
	 */
	protected ArrayList<Karakter> karakterek = new ArrayList<>();

	/**
	 * Jegmezon levo dolgok.
	 */
	private Dolog dolog;

	/**
	 * Adott tabla stabilitasat mutatja.
	 */
	private int stabilitas;

	/**
	 * Adott tablan a horeteg mennyiseget mutatja.
	 */
	private int horeteg;

	/**
	 * Ebben tarolja a tablan levo NPC-ket.
	 */
	private ArrayList<Npc> npck = new ArrayList<>();

	/**
	 * Tablan levo epitmeny.
	 */
	private Epitmeny epitmeny;

	/** Getters - Setters */

	/**
	 * Visszaadja a tabla szomszedait.
	 * @return ArrayList<Tabla></Tablak> A tabla szomszedai.
	 */
	public ArrayList<Tabla> getSzomszedok() {
		return szomszedok;
	}

	/**
	 * Beallitja a tabla szomszedait.
	 * @param szomszedok A azok a tablak amiket be szeretnenk allitani.
	 */
	public void setSzomszedok(ArrayList<Tabla> szomszedok) {
		this.szomszedok = szomszedok;
	}

	/**
	 * Visszaadja a tablan levo karaktereket.
	 * @return ArrayList<Karakter></Karakterek> A tablan levo karakterek.
	 */
	public ArrayList<Karakter> getKarakterek() {
		return karakterek;
	}

	/**
	 * Beallitja a tablan levo karaktereket.
	 * @param karakterek A azok a tablak amiket be szeretnenk allitani.
	 */
	public void setKarakterek(ArrayList<Karakter> karakterek) {
		this.karakterek = karakterek;
	}

	/**
	 * Visszaadja a tablan levo dolgot.
	 * @return Dolog a tablan levo dolog.
	 */
	public Dolog getDolog() {
		return dolog;
	}

	/**
	 * Beallitja a tablan levo dolgot.
	 * @param dolog Az a dolog amit be szeretnenk allitani.
	 */
	public void setDolog(Dolog dolog) {
		this.dolog = dolog;
	}

	/**
	 * Visszaadja a tabla stabilitasat.
	 * @return int a tabla stabilitasa.
	 */
	public int getStabilitas() {
		return this.stabilitas;
	}

	/**
	 * Beallitja a tabla stabilitasat.
	 * @param stabilitas A stabilitas uj erteke.
	 */
	public void setStabilitas(int stabilitas) {
		this.stabilitas = stabilitas;
	}

	/**
	 * Visszaadja a tablan levo horetegek szamat.
	 * @return int a horetekeg szama.
	 */
	public int getHoreteg() {
		return horeteg;
	}

	/**
	 * Beallitja a horetegek szamat.
	 * @param horeteg A horetegek szamanak uj erteke.
	 */
	public void setHoreteg(int horeteg) {
		this.horeteg = horeteg;
	}

	/**
	 * Visszaadja a tablan levo Npc-ket.
	 * @return ArrayList<Npc></Npck> a tablan levo Npc-k.
	 */
	public ArrayList<Npc> getNpck() {
		return npck;
	}

	/**
	 * Beallitja a tablan levo Npc-ket.
	 * @param npck A beallitani kivant Npc-k.
	 */
	public void setNpck(ArrayList<Npc> npck) {
		this.npck = npck;
	}

	/**
	 * Visszaadja a tablan levo Epitmenyt.
	 * @return Epitmeny a tablan epitmeny.
	 */
	public Epitmeny getEpitmeny() {
		return epitmeny;
	}

	/**
	 * Beallitja a tablan levo Epitmenyt.
	 * @param epitmeny Az Epitmeny amit be szeretnenk allitani.
	 */
	public void setEpitmeny(Epitmeny epitmeny) {
		this.epitmeny = epitmeny;
	}

	/** Fuggvenyek: */

	/**
	 * Szomszed tabla lekerdezese.
	 * @param valaszt ha mi szeretnenk kivalasztani a szomszedot akkor true, egyebkent veletlenszeruen valaszt egy szomszedot.
	 * @param irany Ebben az iranyban levo szomszedot szeretnenk lekerni (csak akkor szamit ha a valaszt true).
	 * @return Tabla a szomszed tabla.
	 */
	public Tabla szomszedLeker(boolean valaszt, int irany) {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		/* Ha egy NPC szeretne tablat kerni, azaz masik helyre lepni. */
		if(!valaszt){
			Random rand = new Random();
			int i = rand.nextInt(this.getSzomszedok().size());
			/* Ha palya szelet talalt, ker ujat! */
			if (szomszedok.get(i) == null)
				return szomszedLeker(false, 0);

			return szomszedok.get(i);
		}
		else{
			return szomszedok.get(irany);
		}
	}

	/**
	 * Karakter hozzaadasa a tablahoz.
	 * @param k A karakter, melyet a tabla atvett.
	 */
	public void elfogad(Karakter k) {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		karakterek.add(k);
	}

	/**
	 * Karakter eltavolitasa a tablarol.
	 * @param k A karakter, melyet el szeretnenk tavolitani a tablarol.
	 */
	public void eltavolit(Karakter k) {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		karakterek.remove(k);
	}

	/**
	 * Dolog eltavolitasa a tablarol.
	 */
	public void eltavolit() {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		dolog = null;
	}

	/**
	 * Nem tortenik semmi.
	 */
	public void allapotfrissites() {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");
	}

	/**
	 * Horeteg szamanak valtoztatasa (hovihar+asas is).
	 * @param i Ennyit ad hozza az aktualis retegekhez.
	 */
	public boolean horetegValtoztat(int i) {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		/* i-vel noveljuk a horeteget. */
		horeteg += i;

		/* Ha asas tortent, ezert esetleg minusz lenne a horeteg, akkor beallitjuk 0-ra. */
		if(horeteg < 0){
			horeteg = 0;
		}

		/* Ha a horeteghez hozzaadodott az i, ezaltal nott a horeteg. */
		if(i > 0){
			/* Ha horeteg nagyobb 2-nel, akkor beallitjuk 2-re (ez a maximalis horeteg). */
			if(horeteg > 2){
				horeteg = 2;
			}
			/* Ha nincs iglu a adott tablan, akkor a karakterek HP-jat csokkentjuk egyel (azoket akik ezen a tablan allnak). */
			if(epitmeny == null){
				for (Karakter k : karakterek){
					 if(k.hpValtoztat(-1)){

						 return true;
					 }
				}
			}
		}
		return false;
	}

	/**
	 * Iglut epit.
	 */
	public void igluEpit() {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		epitmeny = new Iglu();
		kiir("iglu_epult", "output.txt");
	}

	/**
	 * Stabilitas kiirasa.
	 */
	public void stabilitastMutat() {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");
		if(this.getClass() == new Tabla().getClass())
			kiir("tabla_stabilitas= " + "stabil","output.txt");
		else
			kiir("tabla_stabilitas= " + stabilitas,"output.txt");
	}

	/**
	 * Npc hozzaadasa.
	 * @param npc Az npc amit hozzaad.
	 */
	public void hozzaadNpc(Npc npc){
		npck.add(npc);
	}

	/**
	 * Npc eltavolitasa.
	 * @param npc Az npc amit eltavolit.
	 */
	public void eltavolitNpc(Npc npc){
		npck.remove(npc);
	}
}