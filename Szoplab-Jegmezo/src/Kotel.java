//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Kotel.java
//  @ Date : 2020. 03. 19.
//  @ Author : 
//
//

/**
 * A kotel osztaly felelossegeit valositja meg.
 */
public class Kotel extends Dolog {

	/**
	 * Kotel hasznalata-kimentes.
	 * @param k A karakter, aki a dolgot hasznalja.
	 * @param irany Melyik iranyban kivanja hasznalni a dolgot.
	 * @return boolean Minden esetben false ertekkel ter vissza (lasd korabbi feladatokban leiras).
	 */
	@Override
	public boolean hasznal(Karakter k, int irany) {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		/* Leker egy szomszedos tablat, valasztani is szeretne, ezert true. */
		Tabla tabla_valasztott = k.getTabla().szomszedLeker(true, irany);

		/* Ellenorzi, hogy kapott-e vissza tablat, mert ha nem akkor az azt jelenti, hogy a mezo hataran van a jatekos. */
		if(tabla_valasztott == null){
			kiir("karakter_hasznal_sikertelen", "output.txt");
			return false;
		}

		/* Az a karakter, akit kimentenek, mindig az, aki a legregebb ota benne van a vizben (nulladik eleme a getnek). */
		if(tabla_valasztott.getKarakterek().size() == 0){
			k.setMunka(k.getMunka()+1);
			return false;
		}
		Karakter karakter_kimentett = tabla_valasztott.getKarakterek().get(0);
		karakter_kimentett.setTabla(k.getTabla());
		/* Ezt a karaktert eltavolitjuk a vizbol. */
		tabla_valasztott.eltavolit(karakter_kimentett);
		/* Elhelyezzuk azon a tablan, ahol a kimentoje is all. */
		k.getTabla().elfogad(karakter_kimentett);
		String s = "karakter_hasznalt_kotel_" + irany;
		kiir(s, "output.txt");
		return false;
	}
}
