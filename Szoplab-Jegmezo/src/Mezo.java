//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Mezo.java
//  @ Date : 2020. 03. 19.
//  @ Author : 
//
//


import java.io.Serializable;
import java.util.ArrayList;
import java.util.Random;

/**
 * A Mezo osztaly felelossegeit valositja meg.
 */
public class Mezo implements Serializable, JatekVezerlo {

	/**
	 * Mezo tablai.
	 */
	private ArrayList<Tabla> tablak = new ArrayList<>();
	/**
	 * Jegmezon levo karakterek.
	 */
	private ArrayList<Karakter> karakterek = new ArrayList<>();
	/**
	 * Jegmezon levo dolgok.
	 */
	private ArrayList<Dolog> dolgok = new ArrayList<>();
	/**
	 * Jegmezon levo epitmenyek.
	 */
	private ArrayList<Epitmeny> epitmenyek = new ArrayList();
	/**
	 * Jegmezon levo NPC-k.
	 */
	private ArrayList<Npc> npck = new ArrayList();
	/**
	 * Jatek allasa (null, nyert, vesztett).
	 */
	private Boolean nyerte = null;
	/**
	 * Letrehoz egy karakert.
	 */
	private Karakter aktualis_karakter;

	/**
	 * Visszadja a mezo tablait.
	 * @return ArrayList<Tabla></Tabla> A mezo tablai.
	 */
	public ArrayList<Tabla> getTablak() {
		return tablak;
	}

	/**
	 * Beallitja a mezo tablait.
	 * @param tablak A mezo tablai.
	 */
	public void setTablak(ArrayList<Tabla> tablak) {
		this.tablak = tablak;
	}

	/**
	 * Visszaadja a mezo karaktereit.
	 * @return ArrayList<Karakterek></Karakterek> A mezo karakterei.
	 */
	public ArrayList<Karakter> getKarakterek() {
		return karakterek;
	}

	/**
	 * Beallitja a mezo karaktereit.
	 * @param karakterek A mezo karakterei.
	 */
	public void setKarakterek(ArrayList<Karakter> karakterek) {
		this.karakterek = karakterek;
	}

	/**
	 * Visszaadja a mezo dolgait.
	 * @return ArrayList<Dolog></Dolog> A mezo dolgai.
	 */
	public ArrayList<Dolog> getDolgok() {
		return dolgok;
	}

	/**
	 * Beallitja a mezo dolgait.
	 * @param dolgok A mezo dolgai.
	 */
	public void setDolgok(ArrayList<Dolog> dolgok) {
		this.dolgok = dolgok;
	}

	/**
	 * Visszaadja a mezo epitmenyeit.
	 * @return ArrayList<Epitmeny></Epitmeny> A mezi epitmenyei.
	 */
	public ArrayList<Epitmeny> getEpitmenyek() {
		return epitmenyek;
	}

	/**
	 * Beallitja a mezo epitmenyeit.
	 * @param epitmenyek A mezo epitmenyei.
	 */
	public void setEpitmenyek(ArrayList<Epitmeny> epitmenyek) {
		this.epitmenyek = epitmenyek;
	}

	/**
	 * Visszaadja a mezo npc-it.
	 * @return ArrayList<Npc></Npc> A mezo npc-i.
	 */
	public ArrayList<Npc> getNpck() {
		return npck;
	}

	/**
	 * Beallitja a mezo npc-it.
	 * @param npck A mezo npc-i.
	 */
	public void setNpck(ArrayList<Npc> npck) {
		this.npck = npck;
	}

	/**
	 * Visszaadja a mezo isNyerte attributum erteket.
	 * @return boolean Ha nyertek akkor true,
	 * ha vesztettek, akkor false,
	 * alapesetben null.
	 */
	public Boolean isNyerte() {
		return nyerte;
	}

	/**
	 * Beallitja a mezo isNyerte attributum erteket.
	 * @param nyerte Az isNyerte attributum erteke.
	 */
	public void setNyerte(Boolean nyerte) {
		this.nyerte = nyerte;
	}

	/**
	 * Visszaadja a mezo aktualis karakteret.
	 * @return Karakter A mezo aktualis karaktere.
	 */
	public Karakter getAktualis_karakter() {
		return aktualis_karakter;
	}

	/**
	 * Beallitja a mezo aktualis karakteret.
	 * @param aktualis_karakter A mezo aktualis karaktere.
	 */
	public void setAktualis_karakter(Karakter aktualis_karakter) {
		this.aktualis_karakter = aktualis_karakter;
	}
	
	/**
	 * A jatekos lehetseges lepseeit valositja meg.
	 */
	public void kovetkezoLepes() {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		/* Aktualis jatekos adatainak kiirasa. */
		//adatok();

		/* Ha meghalt legyen vege! (jojjon a kovetkezo es ellenorzes a jatekban). */
		if(aktualis_karakter.getHp() == 0){
			nyerte = false;
			return;
		}

		/* Ha az aktualis jatekos karaktenenek a munkaja elfogyott, johet a kovetkezo jatekos. */
		if(aktualis_karakter.getMunka() < 1){
			/* Jon a kovetkezo jatekos. */
			kiir("--> Kovetkezo jatekos jon", "output.txt");
			kovetkezoJatekos();
			/* Kovetkezo jatekosnak meg lesz 4 munka lehetosege. */
			aktualis_karakter.setMunka(4);
			/* A tablajat frissitjuk. */
			aktualis_karakter.getTabla().allapotfrissites();
			if(aktualis_karakter.getMunka() < 1)
				kovetkezoLepes();
			/* Ha meghalt legyen vege! (jojjon a kovetkezo es ellenorzes a jatekban). */
			if(aktualis_karakter.getHp() == 0){
				nyerte = false;
				return;
			}
		}
	}


	/**
	 * Mezohoz dolog hozzaadasa.
	 * @param d A dolog, melyet a mezohoz adunk.
	 */
	public void hozzaadD(Dolog d){

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		dolgok.add(d);
	}

	/**
	 * Mezohoz karakter hozzaadasa.
	 * @param k A karakter, melyet a mezohoz adunk.
	 */
	public void hozzaadK(Karakter k){

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		karakterek.add(k);
	}

	/**
	 * Mezohoz tabla hozzaadasa.
	 * @param t A tabla, melyet a mezohoz adunk.
	 */
	public void hozzaadT(Tabla t) {
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		tablak.add(t);
	}

	/**
	 * Hovihar.
	 * @param veletlenszeru A hovihar futasa soran a tablakat veletlenszerun valasztva
	 * vegzi el a hovihar hatasait vagy elore megaddott tablak alapjan (tesztek).
	 */
	public void hovihar(boolean veletlenszeru) {

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		/* Halt-e meg valaki a hovihar soran. */
		boolean halal = false;

		/* A hovihar hatasa veletlenszeruen erint bizonyos tablakat (random). */
		if (veletlenszeru == true) {
			Random rand = new Random();
			for(Tabla t : tablak){
				if(rand.nextBoolean()) {
					/* Ha valaki meghal a hovihartol, akkor vege a jateknak. */
					if(t.horetegValtoztat(1)){
						nyerte = false;
						return;
					}
				}
			}
		}
		else {
			/* A hovihar altal erintett tablak indexei (nem veletlenszerű). */
			for (int i = 0; i < tablak.size(); i++) {
				if(tablak.get(i).horetegValtoztat(1)){
					nyerte = false;
					return;
				}
			}
		}
	}

	/**
	 * Aktualis jatekos legyen a kovetkezo.
	 */
	private	void kovetkezoJatekos(){

		/* Aktualis metodus nevenek kiirasa debug / tesztek celjabol! */
		log("Most a <" + getClass() + "> Osztaly <" + new Throwable().getStackTrace()[0].getMethodName() + "> fuggvenye fut! ");

		int aktualis = karakterek.indexOf(aktualis_karakter);
		aktualis++;
		/* ÚJ KOR (npck lepnek) + Tulindexeles elkerulese vegett + ellenorzi halt-e meg karakter. */
		if (karakterek.size() == aktualis){
			aktualis = 0;
			for(int i = 0; i < npck.size(); i++){
				npck.get(i).cselekszik(-1);
			}
			/* Ellenorzi halt-e meg karakter az npc -k, vagy allapotfrissitesek miatt. */
			for (Karakter k: karakterek ) {
				if(k.getHp() < 1){
					nyerte = false;
					return;
				}
			}
		}
		/* Epitmenyek frissitese. */
		for (Tabla t: tablak) {
			if(t.getEpitmeny() != null)
				t.getEpitmeny().allapotFrissit(karakterek.size());
		}
		aktualis_karakter = karakterek.get(aktualis);
	}
}